apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "hadoop.fullname" . }}-namenode
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "hadoop.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "hadoop.name" . }}-namenode
      app.kubernetes.io/instance: {{ .Release.Name }}
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: "namenode"
    spec:
      accessModes:
      - ReadWriteOnce
      {{ if eq .Values.global.secrets.azure.enable true }}
      storageClassName: managed-csi
      {{- end}}
      resources:
        requests:
          storage: 10Gi
      volumeMode: Filesystem
  serviceName: {{ include "hadoop.namenode.service" . }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/env-configmap.yaml") . | sha256sum }}
      {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      labels:
        app.kubernetes.io/name: {{ include "hadoop.name" . }}-namenode
        app.kubernetes.io/instance: {{ .Release.Name }}
        release: {{ .Release.Name }}
        {{ .Values.global.snappyflowProjectLabel}}: {{ .Values.global.snappyflowProjectName }}
        {{ .Values.global.snappyflowAppLabel }}: {{ .Values.global.snappyflowAppName }}
    spec:
      {{- if .Values.global.sfScheduler.enabled }}
      schedulerName: {{ .Values.global.sfScheduler.schedulerName }}
      {{- end }}
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or (and (eq .Values.global.secrets.aws.enable true) (eq .Values.global.secrets.aws.use_iam_role true)) (and (eq .Values.global.secrets.gcs.enable true) (eq .Values.global.secrets.gcs.use_google_service_account true)) }}
      serviceAccountName: {{ .Release.Name }}-service-account
      {{- end}}
      containers:
        - name: namenode
          image: "{{ .Values.image.namenode.repository }}:{{ .Values.image.namenode.tag }}"
          imagePullPolicy: {{ .Values.image.namenode.pullPolicy }}
          volumeMounts:
          - name: namenode
            mountPath: /hadoop/dfs/name
          envFrom:
          - configMapRef:
              name: {{ template "hive-and-hadoop.fullname" . }}-env
          - configMapRef:
              name: {{ .Release.Name }}-cloud-env
          env:
          - name: HADOOP_HEAPSIZE
            value: "750"
          - name: CLUSTER_NAME
            value: {{ .Release.Name }}
          ports:
            - name: namenode
              containerPort: {{ .Values.service.namenode.port }}
              protocol: TCP
          startupProbe:
            tcpSocket:
              port: namenode
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 20
            timeoutSeconds: 9
          livenessProbe:
            tcpSocket:
              port: namenode
            initialDelaySeconds: 300
            periodSeconds: 60
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
{{- if not .Values.global.development }}
          resources: {{- toYaml .Values.containerResources.namenode | nindent 12 }}
{{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
